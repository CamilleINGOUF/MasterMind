#ifndef MASTERMIND_HPP
#define MASTERMIND_HPP

#include "Plateau.hpp"
#include <string>

enum Joueur
  {
    Client,
    Serveur
  };

//////////////////////////////////////////////////////////////////
/// \brief La classe MasterMind est la classe principale du jeu.
/// \file      mastermind.hpp
/// \author    Camille Ingouf
/// \version   1.2
/// \date 31 mai 2017
/////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
/// \brief La classe du jeu de base
////////////////////////////////////////////////////////////
class Mastermind
{
public:
  ////////////////////////////////////////////////////////////
  /// \brief Constructeur par défaut
  ////////////////////////////////////////////////////////////
  Mastermind();

  ////////////////////////////////////////////////////////////
  /// \brief Permet de récupéré le nombre de manche de la partie
  /// \return int
  ////////////////////////////////////////////////////////////
  int getNbManches() const;

  ////////////////////////////////////////////////////////////
  /// \brief Permet de saisir le nombre de manche de la partie
  /// \param v nombre de manche à donner
  ////////////////////////////////////////////////////////////
  void setNbManches(const int v);

  ////////////////////////////////////////////////////////////
  /// \brief Récupère le plateau actuel
  /// \return Plateau
  ////////////////////////////////////////////////////////////
  Plateau& getPlateau();

  ////////////////////////////////////////////////////////////
  /// \brief Récupère le numéro de la manche actuelle
  /// \return int
  ////////////////////////////////////////////////////////////
  int getCurrentNbManches() const;

  ////////////////////////////////////////////////////////////
  /// \brief Saisie le numéro de la manche actuelle
  /// \param v numéro de la manche à saisir
  ////////////////////////////////////////////////////////////
  void setCurrentNbManches(const int v);

  ////////////////////////////////////////////////////////////
  /// \brief Changer la référence du plateau
  /// \param plateau le nouveau plateau
  ////////////////////////////////////////////////////////////
  void setPlateau(const Plateau plateau);

  ////////////////////////////////////////////////////////////
  /// \brief Récupérer le pseudo du joueur hôte
  /// \return String
  ///////////////////////////////////////////////////////////
  std::string getNomJoueurServeur() const;

  ////////////////////////////////////////////////////////////
  /// \brief Récupérer le pseudo du joueur client
  /// \return String
  ///////////////////////////////////////////////////////////
  std::string getNomJoueurClient() const;

  ////////////////////////////////////////////////////////////
  /// \brief Saisi le nom du joueur hôte
  /// \param nom nom du joueur hôte
  ///////////////////////////////////////////////////////////
  void setNomJoueurServeur(const std::string nom);

  ////////////////////////////////////////////////////////////
  /// \brief Saisi le nom du joueur client
  /// \param nom nom du joueur client
  ///////////////////////////////////////////////////////////
  void setNomJoueurClient(const std::string nom);

  ////////////////////////////////////////////////////////////
  /// \brief Récupère le nom du gagnant
  /// \return String
  ///////////////////////////////////////////////////////////
  std::string getGagnantNom() const;

  ////////////////////////////////////////////////////////////
  /// \brief Change la référence du plateau
  /// \param nom nom du gagnant
  ///////////////////////////////////////////////////////////
  void setGagnantNom(const std::string nom);

  ////////////////////////////////////////////////////////////
  /// \brief Récupére le score actuel sur le serveur
  /// \return int
  ///////////////////////////////////////////////////////////
  int getScoreServeur() const;

  ////////////////////////////////////////////////////////////
  /// \brief Change le score actuel sur le serveuur
  /// \param v score actuel
  ///////////////////////////////////////////////////////////
  void setScoreServeur(const int v);

  ////////////////////////////////////////////////////////////
  /// \brief Récupère le score actuel sur le client
  /// \return int
  ///////////////////////////////////////////////////////////
  int getScoreClient() const;

  ////////////////////////////////////////////////////////////
  /// \brief Change le score actuel sur le client
  /// \param v score actuel
  ///////////////////////////////////////////////////////////
  void setScoreClient(const int v);

  ////////////////////////////////////////////////////////////
  /// \brief détermine le gagnant et indique que la partie est fini par victoire et par coup max
  /// \return bool
  ///////////////////////////////////////////////////////////
  bool decodeurGagnant();

  ////////////////////////////////////////////////////////////
  /// \brief Récupére la valeur du coup secret
  /// \return Combinaison
  ///////////////////////////////////////////////////////////
  const Combinaison getCodeSecret();

  ////////////////////////////////////////////////////////////
  /// \brief Saisi le code secret
  /// \param combinaison
  ///////////////////////////////////////////////////////////
  void setCodeSecret(const Combinaison combinaison);

  ////////////////////////////////////////////////////////////
  /// \brief Lance le jeu
  ////////////////////////////////////////////////////////////
  void run();

  ////////////////////////////////////////////////////////////
  /// \brief Inverser le rôle des joueurs
  /// \note décodeur devient codeur et inversement
  ///////////////////////////////////////////////////////////
  void inverserRoles();

  ////////////////////////////////////////////////////////////
  /// \brief démarre une nouvelle manche
  ///////////////////////////////////////////////////////////
  void nouvelleManche();

  ////////////////////////////////////////////////////////////
  /// \brief Vide le plteau
  ///////////////////////////////////////////////////////////
  void viderPlateau();

  ////////////////////////////////////////////////////////////
  /// \brief Ajout des points à joueurs
  /// \param joueur joueur à qui donner le point
  /// \param v nombre de point à donner
  /// \note Le joueur est soit Client, soit le Serveur
  ///////////////////////////////////////////////////////////
  void ajoutPoints(Joueur joueur, int v);

  ////////////////////////////////////////////////////////////
  /// \brief Indique si la partie est terminé
  /// \return bool
  /// \note une partie est terminé lorsque toutes les manches sont jouées
  ///////////////////////////////////////////////////////////
  bool partieTerminee();

  ////////////////////////////////////////////////////////////
  /// \brief indique si la manche est teminé
  /// \return bool
  /// \note une manche est terminée lorsque tous les tours sont jouées
  ///////////////////////////////////////////////////////////
  bool mancheTerminee();

  ////////////////////////////////////////////////////////////
  /// \brief indique si le tour est teminé
  /// \return bool
  ///////////////////////////////////////////////////////////
  bool tourTermine();
  
private:
  int _nbManches;/// indique le numéro de la manche
  int _currentNbManches;/// indique le numéro de la manche actuel

  int _tourDansManche;/// tour 1, puis tour 2
  
  Plateau _plateau;/// état du plateau

  Combinaison _codeSecret;///code a découvrir 

  std::string _nomJoueurServeur;/// pseudo joueur hôte
  std::string _nomJoueurClient;/// pseudo joueur client

  Joueur _codeur;///joueur codeur
  Joueur _decodeur;///joueur décodeur

  int _scoreServeur;/// score du joueur serveur
  int _scoreClient;/// score du joueur client

  bool _isRunning;/// jeu en cours

  std::string _gagnantNom;/// pseudo du gagnant
  Joueur _gagnantJoueur;/// Serveur ou client
};

#endif
