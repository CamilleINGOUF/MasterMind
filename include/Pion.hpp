////////////////////////////////////////////////////////////
//
// Mastermind
// Copyright (C) 2017 - CAFA
//
////////////////////////////////////////////////////////////


#ifndef PION_HPP_
#define PION_HPP_

////////////////////////////////////////////////////////////
// Headers
////////////////////////////////////////////////////////////
#include <iostream>

//////////////////////////////////////////////////////////////////
/// \brief La classe Pion permet de donner une couleur à un pion.
/// \file      Pion.hpp
/// \author    Axel segard
/// \version   1.2
/// \date 31 mai 2017
//////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////
/// \brief L'enumération de Couleur permet de lister la liste des couleurs possibles
////////////////////////////////////////////////////////////
enum Couleur
  {
    rouge,
    vert,
    bleu,
    marron,
    orange,
    jaune,
    noir,
    blanc,
    vide
  };

///////////////////////////////////////////////////////////////////
/// \brief La class pion permet de gérer la couleur de chaque pion
///////////////////////////////////////////////////////////////////
class Pion
{
private:
  Couleur _couleur;
public:
  ////////////////////////////////////////////////////////////
  /// \brief Constructeur de Pion
  ////////////////////////////////////////////////////////////
  Pion();
  
  Pion(Couleur couleur);
  //////////////////////////////////////////////////////////
  /// \brief Destructeur de pion
  //////////////////////////////////////////////////////////
  ~Pion();
  //////////////////////////////////////////////////////////
  /// \brief Accesseurs pour récupérer la couleur du Pion
  /// \return Une couleur
  //////////////////////////////////////////////////////////
  Couleur getCouleur() const;
  //////////////////////////////////////////////////////////
  /// \brief Accesseurs pour assigner une couleur au Pion
  /// \param couleur la couleur à assigner
  //////////////////////////////////////////////////////////
  void setCouleur(const Couleur couleur);

  ////////////////////////////////////////////////////////////
  /// \brief Cet opérateur permet de lire un pion
  /// \param p2 Le pion qui sera utilisé
  /// \note j donnera jaune
  /// \note r donnera rouge
  /// \note v donnera vert
  /// \note b donnera bleu
  /// \note o donnera orange
  /// \note B donnera blanc
  /// \note m donnera marron
  /// \note n donnera noir
  /// \return True or False
  ////////////////////////////////////////////////////////////
  bool operator==(const Pion & p2) const;
  
  //Pion  & operator=(const Pion & p);

  std::string* getString() const;
};

////////////////////////////////////////////////////////////
/// \brief Cet opérateur permet de lire un pion
/// \param p Le pion qui sera utilisé
/// \param is flux d'entrée
////////////////////////////////////////////////////////////
std::istream & operator>>(std::istream & is, Pion & p);

////////////////////////////////////////////////////////////
/// \brief Cet opérateur permet de d'écrire un pion
/// \param p Le pion qui sera utilisé
/// \param os flux de sortie
////////////////////////////////////////////////////////////
std::ostream & operator<<(std::ostream & os, const Pion & p);

#endif
