#ifndef PLATEAU_HPP_
#define PLATEAU_HPP_

#include <vector>
#include <string>
#include <iostream>
#include "Combinaison.hpp"

//////////////////////////////////////////////////////////////////
/// \brief La classe Plateau permet d'afficher l'état du jeu en cours
/// \file      Plateau.hpp
/// \author    Camille gouf
/// \version   1.0
/// \date 1 juin 2017
//////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////
/// \brief La classe Plateau permet d'afficher l'état du jeu en cours
///////////////////////////////////////////////////////////////////
class Plateau
{
public:
  ////////////////////////////////////////////////////////////
  /// \brief Constructeur de Plateau
  ////////////////////////////////////////////////////////////
  Plateau();

  ////////////////////////////////////////////////////////////
  /// \brief Construit le plateau avec les combinaisons
  ///
  /// \param combinaisons les combinaisons
  ///
  ////////////////////////////////////////////////////////////
  Plateau(std::vector<Combinaison>);
  
  ////////////////////////////////////////////////////////////
  /// \brief Destructeur de Plateau
  ////////////////////////////////////////////////////////////
  ~Plateau();

  //////////////////////////////////////////////////////////
  /// \brief Accesseurs pour récupérer une combinaison
  /// \return Vecteur de combinaisons
  //////////////////////////////////////////////////////////  
  std::vector<Combinaison> getCombinaisons() const;

  //////////////////////////////////////////////////////////
  /// \brief Accesseurs pour changer les combinaisons du plateau
  /// \param combinaisons vecteur de combinaison
  //////////////////////////////////////////////////////////  
  void setCombinaisons(const std::vector<Combinaison> combinaisons);

  //////////////////////////////////////////////////////////
  /// \brief Récupère la dernière combinaison jouée
  /// \return Combinaison de couleur
  //////////////////////////////////////////////////////////  
  Combinaison getLastCombinaison() const;

  //////////////////////////////////////////////////////////
  /// \brief Récupères les corrections
  /// \return Combinaison de pions (noir/blanc/vide)
  //////////////////////////////////////////////////////////  
  std::vector<Combinaison> getCorrections() const;

  //////////////////////////////////////////////////////////
  /// \brief Accesseurs pour changer les corrections de plateau
  /// \param combinaisons vecteur de combinaison (noir/blanc/vide)
  ////////////////////////////////////////////////////////// 
  void setCorrection(const std::vector<Combinaison> combinaisons);

  //////////////////////////////////////////////////////////
  /// \brief Accesseurs pour ajouter une combinaison sur le plateau
  /// \param combinaison combinaison de couleur
  /// \note Combinaison : r j v B pour rouge, jaune, vert, Blanc
  ////////////////////////////////////////////////////////// 
  void addCombinaison(const Combinaison combinaison);

  //////////////////////////////////////////////////////////
  /// \brief Accesseurs pour ajouter une correction sur le plateau
  /// \param correction correction (noir/blanc/vide)
  ////////////////////////////////////////////////////////// 
  void addCorrection(const Combinaison correction);

  //////////////////////////////////////////////////////////
  /// \brief Retourne le plateau sous la forme d'une chaîne de caractères
  ///
  ////////////////////////////////////////////////////////// 
  const std::string toString() const;
  
private:
  
  ////////////////////////////////////////////////////////////
  /// Vecteur des combinaisons avec les pions du jeu
  ////////////////////////////////////////////////////////////
  std::vector<Combinaison> _combinaisons; ///< Historique des coups joués

  ////////////////////////////////////////////////////////////
  /// Vecteur des corrections correspondant aux combinaisons
  /// Ce vecteur est composé de pions blancs et noirs seulement
  ////////////////////////////////////////////////////////////
  std::vector<Combinaison> _corrections;
};

////////////////////////////////////////////////////////////
/// \brief Cet opérateur permet d'écrire un plateau
/// \param p Le plateau qui sera utilisé
/// \param os flux de sortie
////////////////////////////////////////////////////////////
std::ostream & operator<<(std::ostream & os, const Plateau & p);

////////////////////////////////////////////////////////////
/// \brief Cet opérateur permet de lire un plateau
/// \param p Le plateau qui sera utilisé
/// \param is flux d'entrée
////////////////////////////////////////////////////////////
std::istream & operator>>(std::istream & is,  Plateau & p);

#endif
