#ifndef _PION_DRAWABLE_HPP
#define _PION_DRAWABLE_HPP

////////////////////////////////////////////////////////////
/// Headers
////////////////////////////////////////////////////////////
#include "AssetsDeclarations.hpp"
#include "AssetManager.hpp"
#include "Pion.hpp"

#include <SFML/Graphics.hpp>

////////////////////////////////////////////////////////////
/// \brief La représentation graphique d'un pion
////////////////////////////////////////////////////////////
class PionDrawable : public sf::Drawable
{
public:
  ////////////////////////////////////////////////////////////
  /// \brief Constructeur par défaut
  ///
  ////////////////////////////////////////////////////////////
  PionDrawable();

  ////////////////////////////////////////////////////////////
  /// \brief Constructeur avec pion
  ///
  /// \param p un pion
  /// \param textureManager le gestionnaire de textures
  ///
  ////////////////////////////////////////////////////////////
  PionDrawable(Pion p, TextureManager* textureManager);

  ////////////////////////////////////////////////////////////
  /// \brief Change "la couleur du pion"
  ///
  /// \param p un pion
  ///
  ////////////////////////////////////////////////////////////
  void setPion(const Pion& p);

  ////////////////////////////////////////////////////////////
  /// \brief détecte les évènements
  /// 
  /// \param event voir sf::Event
  ///
  ////////////////////////////////////////////////////////////
  bool catchEvent(sf::Event& event);

  ////////////////////////////////////////////////////////////
  /// \brief Définit la posiion du pion
  ///
  /// \param pos la nouvelle position
  ///
  /////////////////////////////////////////////////////////
  void setPosition(const sf::Vector2f& pos);

  /////////////////////////////////////////////////////////
  /// \brief Retourne le pion associé
  ///
  /// \return Le pion associé à l'objet
  /////////////////////////////////////////////////////////
  Pion getPion() const;

  /////////////////////////////////////////////////////////
  /// \brief Définit le facteur d'agrandissement
  ///
  /// \param factors le facteur d'agrandissement
  ///
  /////////////////////////////////////////////////////////
  void setScale(const sf::Vector2f& factors);
private:
  virtual void draw(sf::RenderTarget& target, sf::RenderStates states) const;

  /////////////////////////////////////////////////////////
  /// \brief Met à jour le sprite en fonction du pion
  ///
  /////////////////////////////////////////////////////////
  void updateSprite();

  /////////////////////////////////////////////////////////
  /// Données membres
  /////////////////////////////////////////////////////////
  TextureManager* _textureManager; ///< Le gestionnaire de polices
  sf::Sprite      _sprite;         ///< Le sprite du pion
  Pion            _pion;           ///< Un pion
};

#endif
