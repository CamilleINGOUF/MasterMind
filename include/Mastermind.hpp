#ifndef MASTERMIND_HPP
#define MASTERMIND_HPP

////////////////////////////////////////////////////////////
/// Headers
////////////////////////////////////////////////////////////
#include "Plateau.hpp"

#include <string>

enum Joueur
{
  A, ///< Le premier joueur
  B  ///< Le deuxième joueur
};


////////////////////////////////////////////////////////////
/// \brief La classe du jeu de base
///
////////////////////////////////////////////////////////////
class Mastermind
{
public:
  ////////////////////////////////////////////////////////////
  /// \brief Constructeur par défaut
  ///
  ////////////////////////////////////////////////////////////
  Mastermind();

  ////////////////////////////////////////////////////////////
  /// \brief Permet de récupérer le nombre de manche de la partie
  ///
  /// \return Le nombre de manches
  ///
  ////////////////////////////////////////////////////////////
  int getNbManches() const;

  ////////////////////////////////////////////////////////////
  /// \brief Permet de saisir le nombre de manche de la partie
  ///
  /// \param v nombre de manche à donner
  ///
  ////////////////////////////////////////////////////////////
  void setNbManches(const int v);

  ////////////////////////////////////////////////////////////
  /// \brief Récupère le plateau actuel
  ///
  /// \return le plateau de jeu
  ///
  ////////////////////////////////////////////////////////////
  Plateau& getPlateau();

  ////////////////////////////////////////////////////////////
  /// \brief Récupère le numéro de la manche actuelle
  ///
  /// \return le nombre total de manches
  ///
  ////////////////////////////////////////////////////////////
  int getCurrentNbManches() const;

  ////////////////////////////////////////////////////////////
  /// \brief Saisie le numéro de la manche actuelle
  ///
  /// \param v numéro de la manche à saisir
  ///
  ////////////////////////////////////////////////////////////
  void setCurrentNbManches(const int v);

  ////////////////////////////////////////////////////////////
  /// \brief Changer la référence du plateau
  ///
  /// \param plateau le nouveau plateau
  ///
  ////////////////////////////////////////////////////////////
  void setPlateau(const Plateau& plateau);

  ////////////////////////////////////////////////////////////
  /// \brief Récupére le nom du joueur A
  ///
  /// \return le nom du joueur A
  ///////////////////////////////////////////////////////////
  const std::string& getNomJoueurA() const;

  ////////////////////////////////////////////////////////////
  /// \brief Récupérer le nom du joueur B
  ///
  /// \return le nom du joueur B
  ///
  ///////////////////////////////////////////////////////////
  const std::string& getNomJoueurB() const;

  ////////////////////////////////////////////////////////////
  /// \brief Saisi le nom du joueur A
  ///
  /// \param nom le nom du joueur A
  ///
  ///////////////////////////////////////////////////////////
  void setNomJoueurA(const std::string& nom);

  ////////////////////////////////////////////////////////////
  /// \brief Saisi le nom du joueur client
  /// \param nom nom du joueur client
  ///////////////////////////////////////////////////////////
  void setNomJoueurB(const std::string& nom);

  ////////////////////////////////////////////////////////////
  /// \brief Récupère le nom du gagnant
  ///
  /// \return le nom du gagnant
  ///
  ///////////////////////////////////////////////////////////
  const std::string& getGagnantNom() const;

  ////////////////////////////////////////////////////////////
  /// \brief Définit le nom du gagnant
  ///
  /// \param nom le nom du gagnant
  ///
  ///////////////////////////////////////////////////////////
  void setGagnantNom(const std::string& nom);

  ////////////////////////////////////////////////////////////
  /// \brief Récupére le score du joueur A
  ///
  /// \return int le score du joueur A
  ///
  ///////////////////////////////////////////////////////////
  int getScoreJoueurA() const;

  ////////////////////////////////////////////////////////////
  /// \brief Définit le score du joueur A
  ///
  /// \param v le score du joueur A
  ///
  ///////////////////////////////////////////////////////////
  void setScoreJoueurA(const int v);

  ////////////////////////////////////////////////////////////
  /// \brief Récupère le score actuel sur le client
  ///
  /// \return int le score du joueur B
  ///
  ///////////////////////////////////////////////////////////
  int getScoreJoueurB() const;

  ////////////////////////////////////////////////////////////
  /// \brief Définit le score du joueur B
  ///
  /// \param v le score du joueur B
  ///
  ///////////////////////////////////////////////////////////
  void setScoreJoueurB(const int v);

  ////////////////////////////////////////////////////////////
  /// \brief Détermine le gagnant et indique que la partie est finie
  /// par victoire et par coup max
  ///
  /// \return True si la partie est finie, faux sinon
  ///
  ///////////////////////////////////////////////////////////
  bool decodeurGagnant();

  ////////////////////////////////////////////////////////////
  /// \brief Récupére la valeur du coup secret
  ///
  /// \return La combinaison secrète
  ///
  ///////////////////////////////////////////////////////////
  const Combinaison& getCodeSecret();

  ////////////////////////////////////////////////////////////
  /// \brief Met à jour la combinaison secrète
  ///
  /// \param combinaison la combinaison secrète
  ///
  ///////////////////////////////////////////////////////////
  void setCodeSecret(const Combinaison& combinaison);

  ////////////////////////////////////////////////////////////
  /// \brief Indique si le plateau est vide
  ///
  /// \return True si le plateau est vide, faux sinon
  ///
  ///////////////////////////////////////////////////////////
  bool plateauVide();

  ////////////////////////////////////////////////////////////
  /// \brief Retourne le décodeur
  ///
  /// \return Le décodeur
  ///
  ///////////////////////////////////////////////////////////
  Joueur getDecodeur() const;

  ////////////////////////////////////////////////////////////
  /// \brief Lance le jeu
  ///
  ////////////////////////////////////////////////////////////
  void run();

  ////////////////////////////////////////////////////////////
  /// \brief Inverser le rôle des joueurs
  ///
  /// \note décodeur devient codeur et inversement
  ///
  ///////////////////////////////////////////////////////////
  void inverserRoles();

  ////////////////////////////////////////////////////////////
  /// \brief démarre une nouvelle manche
  ///
  ///////////////////////////////////////////////////////////
  void nouvelleManche();

  ////////////////////////////////////////////////////////////
  /// \brief Vide le plateau
  ///
  ///////////////////////////////////////////////////////////
  void viderPlateau();

  ////////////////////////////////////////////////////////////
  /// \brief Ajout des points à joueurs
  ///
  /// \param joueur joueur à qui donner le point
  /// \param v nombre de point à donner
  /// \note Le joueur est soit Client, soit le Serveur
  ///
  ///////////////////////////////////////////////////////////
  void ajoutPoints(Joueur joueur, int v);

  ////////////////////////////////////////////////////////////
  /// \brief Indique si la partie est terminé
  /// \return bool
  /// \note une partie est terminé lorsque toutes les manches sont jouées
  ///////////////////////////////////////////////////////////
  bool partieTerminee();

  ////////////////////////////////////////////////////////////
  /// \brief Indique si la manche est terminé
  ///
  /// \note une manche est terminée lorsque tous les tours sont jouées
  ///
  /// \return True si la manche est terminée, false sinon
  ///////////////////////////////////////////////////////////
  bool mancheTerminee();

  ////////////////////////////////////////////////////////////
  /// \brief Indique si le tour est terminé
  ///
  /// \return True si la manche est terminée, false sinon
  ///
  ///////////////////////////////////////////////////////////
  bool tourTermine();

  ////////////////////////////////////////////////////////////
  /// \brief Ajoute une combinaison au plateau de jeu
  ///
  /// \param combi la combinaison à ajouter
  ///
  ///////////////////////////////////////////////////////////
  void ajouterCombinaison(Combinaison& combi);

  ////////////////////////////////////////////////////////////
  /// \brief Retourne le nombre d'essais pour trouver la combinaison secrète
  ///
  /// \return le nombre d'essais
  ///
  ///////////////////////////////////////////////////////////
  unsigned getNombreEssais() const;

  ////////////////////////////////////////////////////////////
  /// \brief effectue la correction de la dernière combinaison
  /// ajoutée et l'affiche dans le plateau de jeu
  ///
  ///////////////////////////////////////////////////////////
  void corrigerDerniereCombinaison();

  ////////////////////////////////////////////////////////////
  /// \brief Retourne le joueur gagnant
  ///
  /// \return le joueur gagnat
  ///
  ///////////////////////////////////////////////////////////
  Joueur getGagnant() const;
private:
  ///////////////////////////////////////////////////////////
  /// Données membres
  ///////////////////////////////////////////////////////////
  
  int         _nbManches;        ///< Le nombre total de manches
  int         _currentNbManches; ///< La manche courante
  int         _tourDansManche;   ///< Le tour courant
  Plateau     _plateau;          ///< Le plateau de jeu
  Combinaison _codeSecret;       ///< La combinaison secrète
  std::string _nomJoueurA;       ///< Le pseudo du joueur A
  std::string _nomJoueurB;       ///< Le pseudo du joueur B
  Joueur      _codeur;           ///< Le codeur du tour courant
  Joueur      _decodeur;         ///< Le décodeur du tour courant
  int         _scoreA;           ///< Le score du joueur A
  int         _scoreB;           ///< Le score du joueur B
  std::string _gagnantNom;       ///< Le nom du gagnant de la partie
  Joueur      _gagnantJoueur;    ///< Le gagnant de la partie
};

#endif
