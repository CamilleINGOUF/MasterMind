#ifndef MUSIC_PLAYER_HPP_
#define MUSIC_PLAYER_HPP_

////////////////////////////////////////////////////////////
/// Headers
////////////////////////////////////////////////////////////
#include "AssetsDeclarations.hpp"
#include "AssetManager.hpp"

#include <map>
#include <string>
#include <SFML/Audio/Music.hpp>

typedef std::map<Musics::ID, std::string> MusicContainer;

////////////////////////////////////////////////////////////
/// \brief Gestion des sons
////////////////////////////////////////////////////////////
class MusicPlayer
{
public:
  ////////////////////////////////////////////////////////////
  /// \brief Constructeur par défaut
  ///
  ////////////////////////////////////////////////////////////
  MusicPlayer();

  ////////////////////////////////////////////////////////////
  /// \brief Le destructeur
  ///
  ////////////////////////////////////////////////////////////
  ~MusicPlayer();

  ////////////////////////////////////////////////////////////
  /// \brief Joue une musique
  ///
  /// \param id L'identifiant de la musique
  ///
  ////////////////////////////////////////////////////////////
  void play(Musics::ID id);

  ////////////////////////////////////////////////////////////
  /// \brief Coupe le son de la musique
  ///
  ////////////////////////////////////////////////////////////
  void mute();

  ////////////////////////////////////////////////////////////
  /// \brief Remets le son de la musique
  ///
  ////////////////////////////////////////////////////////////
  void unmute();  
private:
  
  ////////////////////////////////////////////////////////////
  /// Données membres
  ////////////////////////////////////////////////////////////
  MusicContainer _playlist; ///< Le chemin d'accès aux musiques
  sf::Music      _music;    ///< La musique
};

#endif // MUSIC_PLAYER_HPP_
